#!/usr/bin/env ruby

require 'rspec'
require 'forwardable'

$queue = []

class DrbExampleGroup
  def initialize(group)
    @group = group
  end

  def method_missing(m, *args)
    @group.send(m, *args)
  end

  def respond_to?(m)
    super || @group.respond_to?(m)
  end

  def run(reporter)
    puts "Queueing #{@group}"
    $queue << [self, reporter]
  end
end

class DrbRunner < RSpec::Core::Runner
  def run_specs(example_groups)
    super(example_groups.map { |g| DrbExampleGroup.new(g) })
  end
end

runners = []
pipes = []
concurrency = 4
1.upto(concurrency) do |i|
  rd, wr = IO.pipe
  if pid = fork
    # parent
    rd.close
    pipes << wr
    runners << pid
  else
    # child
    wr.close

    begin
      rd.read_nonblock(1)
    rescue EOFError
      rd.close
    rescue Errno::EWOULDBLOCK, Errno::EAGAIN, Errno::EINTR
    #puts "waiting in #{$$}"
      sleep 0.5
      retry
    end
    Process.exec('true')
  end
end

p DrbRunner.run(['spec'])

    pipes.each do |pipe|
      pipe.close
    end
    runners.each do |pid|
      begin
      #p "waiting for #{pid}"
        Process.wait(pid)
      rescue Errno::ECHILD
      end
    end
